version: '2'
services:
  mongodb:
    image: mongo:4.0.1
    container_name: "mongodb-rs1"
    environment:
      - MONGO_DATA_DIR=/data/db
      - MONGO_LOG_DIR=/var/log/mongodb
    volumes:
      - "~/service-compose/mongo-data:/data/db"
      - "./mongodb:/home"
    ports:
      - 27017:27017
    command: mongod --noprealloc --smallfiles --oplogSize 16 --dbpath /data/db --noauth
    restart: always

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: admin123
      POSTGRES_USER: admin
    volumes:
      - "/Users/useradmin/Documents/jobs/tools/docker-env/postgres/data"
      - "./postgres-data:/var/lib/postgresql/data"

    ports:
      - 5432:5432 

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  mysql:
    image: mysql:5.7.26
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      # So you don't have to use root, but you can if you like
      MYSQL_USER: 'admin'
      # You can use whatever password you like
      MYSQL_PASSWORD: 'admin123'
      # Password for root access
      MYSQL_ROOT_PASSWORD: 'admin123'
    ports:
      # <Port exposed> : < MySQL Port running inside container>
      - '3306:3306'
    expose:
      # Opens port 3306 on the container
      - '3306'
      # Where our data will be persisted
    volumes:
      - ./mysql-data:/var/lib/mysql

  redis:
    image: redis:3.2.9
    container_name: "redis"
    volumes:
      - "~/service-compose:/var/lib/redis"
    ports:
      - "6379:6379"

  redis-commander:
      container_name: redis-commander
      hostname: redis-commander
      image: rediscommander/redis-commander:latest
      restart: always
      environment:
      - REDIS_HOSTS=local:redis:6379
      ports:
      - 8081:8081

  sonarqube:
    container_name:  sonarqube
    image:  sonarqube:latest
    ports:
      -  "9000:9000"
      -  "9092:9092"

  jenkins:
    image: jenkinsci/blueocean
    user: root
    ports:
      - "8080:8080"
      - "8443:8443"
      - "50000:50000"
    volumes:
      - ./jenkins_data:/var/jenkins_home
      ##### Mac OS X and Linux ONLY #####
      - /var/run/docker.sock:/var/run/docker.sock

  elasticsearch:
    image: elasticsearch:7.2.0
    container_name: "elasticsearch"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
    volumes:
      # - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - "./elasticsearch:/usr/share/elasticsearch/data"
    networks:
      - elk
 

  kibana:
    container_name: "kibana"
    build:
      context: kibana/
    volumes:
      - ./kibana/config/:/usr/share/kibana/config
    ports:
      - "5601:5601"
    networks:
      - elk
    depends_on:
      - elasticsearch

networks:
  elk:
    driver: bridge

